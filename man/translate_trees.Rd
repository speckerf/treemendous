% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translate_trees.R
\name{translate_trees}
\alias{translate_trees}
\title{Translate species names according to a custom target database.}
\usage{
translate_trees(df, target)
}
\arguments{
\item{df}{\code{tibble} with species that the user wants to translate into the species names of target. Species binomial split into the columns \code{Genus} and \code{Species}}

\item{target}{\code{tibble} with a new custom target database. Species binomial split into the columns \code{Genus} and \code{Species}}
}
\value{
Returns a \code{tibble} with the same corresponding translated names in \code{Matched.Genus} and \code{Matched.Species}.
Process information from calling matching() and enforce_matching() is added to the output.
}
\description{
The function is essentially a wrapper around the functions \code{\link[=matching]{matching()}} and \code{\link[=enforce_matching]{enforce_matching()}}.
Species names from \code{df} are first directly matched to \code{target} by calling \code{matching(df, backbone = 'CUSTOM', target_df = target)}.
Subsequently, the function calls \code{enforce_matching(df, backbone = 'CUSTOM', target_df = target)} to increase the number of translated species.
}
\examples{
set.seed(100)
target_df <- iucn \%>\% dplyr::sample_n(size = nrow(iucn) - 5) \%>\% dplyr::rename(Genus = Orig.Genus, Species = Orig.Species)
df <- iucn \%>\% dplyr::slice(1:100)
a <- translate_trees(df, target_df)
}
